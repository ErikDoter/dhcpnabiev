b'from typing import List\n\nfrom directory_service.transport.group_based_utils import move_group_to_container, check_consistency\nfrom directory_service.transport.logon import IPAError\nfrom directory_service.transport.models import BaseFind, BaseAdd, BaseTransport, BaseGet, BaseDelete, BaseUpdate\nfrom directory_service.utils import get_ipa_field, get_result_batch_response_list, get_location\nfrom directory_service.transport.group_policy_templates import GroupPolicyTemplateTransport\n\n\nclass GroupPolicyTemplateGroupTransport(BaseTransport):\n\n    template_transport = GroupPolicyTemplateTransport\n\n    @classmethod\n    def find(cls, cn=None, template=None, attrs=None, sizelimit=0):\n        attrs = attrs or {}\n        attrs.update(searchfrom=template)\n        return cls.request(cls.Find(attrs=attrs))\n\n    @classmethod\n    def add(cls, dn=None, attrs=None):\n        cn, container = get_location(dn)\n        attrs.pop(\'cn\', None)\n        return cls.request(cls.Add(ident=cn, attrs=attrs))\n\n    @classmethod\n    def get(cls, dn=None, attrs=None):\n        cn, container = get_location(dn)\n        attrs = attrs or {}\n        attrs.update(searchfrom=container)\n        data = cls.request(cls.Get(ident=cn, attrs=attrs))\n        return data\n\n    @classmethod\n    def delete(cls, dn=None, attrs=None):\n        cn, container = get_location(dn)\n        attrs = attrs or {}\n        attrs.update(searchfrom=container)\n        return cls.request(cls.Delete(ident=cn, attrs=attrs))\n\n    @classmethod\n    def check_already_exists(cls, cn, target_container):\n        same_name_objects = [t.get(\'cn\') for t in cls.find(cn=cn, template=target_container)]\n        return True if same_name_objects else False\n\n    @classmethod\n    def update(cls, dn=None, attrs=None):\n        attrs = attrs or {}\n\n        new_container = attrs.pop(\'searchfrom\', None)\n        cn, container = get_location(dn)\n        if not new_container or new_container == container:\n            attrs.update(searchfrom=container)\n            cls.request(cls.Update(ident=cn, attrs=attrs))\n            return cls.get(dn, attrs=dict(searchfrom=container))\n        if cls.check_already_exists(cn, new_container):\n            raise IPAError(\'DuplicateEntry\', f\'"{cn}" is already exists in "{new_container}"\')\n        check_consistency(dn, new_container)\n        move_group_to_container(cls, cls.template_transport, dn, new_container, attrs)\n        cls.delete(dn)\n        return cls.get(f\'cn={cn},{new_container}\')\n\n    class Find(BaseFind):\n        method = \'templatepolicygroup_find\'\n\n    class Add(BaseAdd):\n        method = \'templatepolicygroup_add\'\n\n        def result(self, data):\n            return data\n\n    class Get(BaseGet):\n        method = \'templatepolicygroup_show\'\n\n    class Delete(BaseDelete):\n        method = \'templatepolicygroup_del\'\n\n        def params(self, kwargs):\n            data = kwargs.get(\'attrs\') or {}\n            return data\n\n    class Update(BaseUpdate):\n        method = \'templatepolicygroup_mod\'\n\n        def result(self, data):\n            return data\n\n'