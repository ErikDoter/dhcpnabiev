from django.conf import settings
from django.utils.translation import gettext as _

from directory_service.transport.models import Method, Transport
from directory_service.utils import get_ipa_field
from directory_service.transport.logon import IPAError
from directory_service.views import to_log
from directory_service.utils import get_result_batch_response_list


class TopologySegmentTransport(Transport):

    # ipa topologysegment-find
    @staticmethod
    def find(topologysuffixcn=None, sizelimit=0, attrs=None):
        """Возвращает список сегментов топологии

        Arguments:
            topologysuffixcn (str): Маска имени суффикса
            sizelimit (int): Ограничение на количество найденных имён (0 - не ограничено)
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами поиска

        Returns:
            List[Dict[str, Any]]: Список найденных сегментов топологии

            Если маска имени сегмента топологии не указана, возвращает список всех сегментов топологии

        """

        from directory_service.transport.domain_controller import DomainControllerTransport

        topologysuffixcn = topologysuffixcn or settings.DEFAULT_TOPOLOGYSUFFIXCN

        topologysegments = TopologySegmentTransport.request(TopologySegmentTransport.Find(
            topologysuffixcn=topologysuffixcn,
            sizelimit=sizelimit,
            attrs=attrs)
        )
        if not topologysegments:
            return []

        validated_topologysegments = []
        leftservers = []
        rightservers = []

        leftservers, rightservers = TopologySegmentTransport._extract_left_right_servers(topologysegments)

        valid_flags, leftvalids, rightvalids = TopologySegmentTransport._check_validity_topologysegments(leftservers,
                                                                                                         rightservers,
                                                                                                         many=True)

        for ts, valid_flag, leftvalid, rightvalid in zip(topologysegments, valid_flags, leftvalids, rightvalids):
            if valid_flag:
                validated_topologysegments.append(ts)
            else:
                msg = TopologySegmentTransport._get_log_msg_error_validity(leftvalid, rightvalid)
                to_log(__name__, 'error', _('Ошибка валидности соглашения: ') + str(msg))

        leftservers, rightservers = TopologySegmentTransport._extract_left_right_servers(validated_topologysegments)

        servers = leftservers + rightservers
        sites = DomainControllerTransport._get_site(servers, many=True)
        ips = DomainControllerTransport.get_ip(servers, many=True)
        half_len = int(len(servers) / 2)

        leftsites = sites[:half_len]
        rightsites = sites[half_len:]
        leftips = ips[:half_len]
        rightips = ips[half_len:]

        for ts, leftsite, rightsite, leftip, rightip in zip(validated_topologysegments, leftsites, rightsites, leftips,
                                                            rightips):
            ts['leftsite'] = leftsite
            ts['rightsite'] = rightsite
            ts['leftip'] = leftip
            ts['rightip'] = rightip

        return validated_topologysegments

    # ipa topologysegment-show
    @staticmethod
    def get(cn, topologysuffixcn=None, attrs=None):
        """Возвращает все атрибуты сегмента топологии

        Arguments:
            cn (str): Имя сегмента топологии
            topologysuffixcn (str): Суффикс
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами поиска

        Returns:
            Dict[str, Any]: Словарь с дополнительными атрибутами

        """

        from directory_service.transport.domain_controller import DomainControllerTransport

        topologysuffixcn = topologysuffixcn or settings.DEFAULT_TOPOLOGYSUFFIXCN
        topologysegment = TopologySegmentTransport.request(
            TopologySegmentTransport.Get(cn=cn, topologysuffixcn=topologysuffixcn, attrs=attrs))

        leftserver = get_ipa_field(topologysegment, 'iparepltoposegmentleftnode')
        rightserver = get_ipa_field(topologysegment, 'iparepltoposegmentrightnode')

        ts_valid_flag = TopologySegmentTransport._check_validity_topologysegments([leftserver], [rightserver])

        if not ts_valid_flag[0]:
            raise IPAError(_('Ошибка валидности соглашения:'),
                           TopologySegmentTransport._get_log_msg_error_validity(ts_valid_flag[1], ts_valid_flag[2]))

        servers = [leftserver, rightserver]
        sites = DomainControllerTransport._get_site(servers, many=True)
        ips = DomainControllerTransport.get_ip(servers, many=True)

        topologysegment['leftsite'] = sites[0]
        topologysegment['rightsite'] = sites[1]
        topologysegment['leftip'] = ips[0]
        topologysegment['rightip'] = ips[1]

        return topologysegment

    @staticmethod
    def _check_validity_topologysegments(leftservers, rightservers, many=False):
        from directory_service.transport.domain_controller import DomainControllerTransport

        servers_cn = leftservers + rightservers
        servers = TopologySegmentTransport.request(
            [DomainControllerTransport.GetServer(server=cn) for cn in servers_cn], raise_on_err=False)
        half_len = int(len(servers) / 2)
        leftservers = get_result_batch_response_list(servers[:half_len])
        rightservers = get_result_batch_response_list(servers[half_len:])
        result = []

        for leftserver, rightserver in zip(leftservers, rightservers):
            if leftserver.get('error', None) or rightserver.get('error', None):
                result.append(False)
            else:
                result.append(True)

        return (result, leftservers, rightservers) if many else (result[0], leftservers[0], rightservers[0])

    @staticmethod
    def _extract_left_right_servers(topologysegments):
        leftservers, rightservers = [], []

        for ts in topologysegments:
            leftservers.append(get_ipa_field(ts, 'iparepltoposegmentleftnode'))
            rightservers.append(get_ipa_field(ts, 'iparepltoposegmentrightnode'))

        return leftservers, rightservers

    @staticmethod
    def _get_log_msg_error_validity(leftvalid, rightvalid):
        msg = ''
        errornode = None
        if leftvalid.get('error', None):
            errornode = leftvalid
        else:
            errornode = rightvalid
        if isinstance(errornode.get('error', ''), dict):
            msg = errornode.get('error', {}).get('message', 'error')
        else:
            msg = errornode.get('error', 'error')

        return msg

    # ipa topologysegment-add
    @staticmethod
    def add(cn, leftnode, rightnode, topologysuffixcn=None, attrs=None):
        """Создает сегмент топологии

        Arguments:
            cn (str): Имя сегмента топологии
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами
        
        Returns:
            str: При успешном выполнении операции возвращает имя созданного сегмента топологии

        """

        attrs = attrs or {}

        topologysuffixcn = topologysuffixcn or settings.DEFAULT_TOPOLOGYSUFFIXCN

        topologysegment = TopologySegmentTransport.request(TopologySegmentTransport.Add(
            cn=cn,
            topologysuffixcn=topologysuffixcn,
            iparepltoposegmentleftnode=leftnode,
            iparepltoposegmentrightnode=rightnode,
            attrs=attrs)
        )

        return topologysegment

    # ipa topologysegment-mod
    @staticmethod
    def update(cn, topologysuffixcn=None, attrs=None):
        """Изменяет запись сегмента топологии

        Arguments:
            cn (str): Имя сегмента топологии
            topologysuffixcn (str): Суффикс
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами
        
        Returns:
            bool: При успешном выполнении операции возвращает True

        """

        attrs = attrs or {}

        topologysuffixcn = topologysuffixcn or settings.DEFAULT_TOPOLOGYSUFFIXCN
        TopologySegmentTransport.request(
            TopologySegmentTransport.Update(cn=cn, topologysuffixcn=topologysuffixcn, attrs=attrs))

        return True

    # ipa topologysegment-reinitialize
    @staticmethod
    def reinitialize(cn, topologysuffixcn=None, attrs=None):
        """Переинициализирует запись сегмента топологии

        Arguments:
            cn (str): Имя сегмента топологии
            topologysuffixcn (str): Суффикс
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами
        
        Returns:
            bool: При успешном выполнении операции возвращает True

        """

        attrs = attrs or {}

        topologysuffixcn = topologysuffixcn or settings.DEFAULT_TOPOLOGYSUFFIXCN
        TopologySegmentTransport.request(
            TopologySegmentTransport.Reinitialize(cn=cn, topologysuffixcn=topologysuffixcn, attrs=attrs))

        return True

    # ipa topologysegment-del
    @staticmethod
    def delete(cn, topologysuffixcn=None):
        """Удаляет сегмент топологии

        Arguments:
            cn (str): Имя
            topologysuffixcn (str): Суффикс

        Returns:
            bool: При успешном выполнении операции возвращает True

        """

        topologysuffixcn = topologysuffixcn or settings.DEFAULT_TOPOLOGYSUFFIXCN
        TopologySegmentTransport.request(TopologySegmentTransport.Delete(cn=cn, topologysuffixcn=topologysuffixcn))

        return True

    class Find(Method):
        """Возвращает список сегментов топологии

        Arguments:
            topologysuffixcn (str): Маска имени суффикса
            sizelimit (int): Ограничение на количество найденных имён (0 - не ограничено)
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами поиска

        Returns:
            List[Dict[str, Any]]: Список найденных сегментов топологии

            Если маска имени сегмента топологии не указана, возвращает список всех сегментов топологии

        """

        method = 'topologysegment_find'
        kwargs = {'topologysuffixcn': None, 'sizelimit': 0, 'attrs': {}}

        def item(self, kwargs):
            return kwargs.get('topologysuffixcn')

        def params(self, kwargs):
            data = {
                'all': False,
                'sizelimit': kwargs.get('sizelimit'),
            }
            data.update(kwargs.get('attrs') or {})
            return data

    class Get(Method):
        """Возвращает все атрибуты сегмента топологии

        Arguments:
            cn (str): Имя сегмента топологии
            topologysuffixcn (str): Суффикс
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами поиска

        Returns:
            Dict[str, Any]: Словарь с атрибутами записи

        """

        method = 'topologysegment_show'
        kwargs = {'cn': None, 'topologysuffixcn': None, 'attrs': {}}

        def kwargs_validate(self, kwargs):
            return None not in [kwargs.get('cn'), kwargs.get('topologysuffixcn')]

        def item(self, kwargs):
            return kwargs.get('topologysuffixcn'), kwargs.get('cn')

        def params(self, kwargs):
            data = {
                'all': True,
                'raw': False,
                'rights': False,
            }
            data.update(kwargs.get('attrs') or {})
            return data

    class Add(Method):
        """Создает сегмент топологии

        Arguments:
            cn (str): Имя сегмента топологии
            topologysuffixcn (str): Суффикс
            iparepltoposegmentleftnode (str): Левый узел
            iparepltoposegmentrightnode (str): Правый узел
        
        Keyword arguments:
            Dict(str, Any): Перечень иных полей

        Returns:
            bool: При успешном выполнении операции возвращает True

        """

        method = 'topologysegment_add'
        kwargs = {
            'cn': None,
            'topologysuffixcn': None,
            'iparepltoposegmentleftnode': None,
            'iparepltoposegmentrightnode': None
        }

        def kwargs_validate(self, kwargs):
            return None not in [
                kwargs.get('cn'),
                kwargs.get('topologysuffixcn'),
                kwargs.get('iparepltoposegmentleftnode'),
                kwargs.get('iparepltoposegmentrightnode')
            ]

        def item(self, kwargs):
            return kwargs.get('topologysuffixcn'), kwargs.get('cn')

        def params(self, kwargs):
            data = {
                'iparepltoposegmentleftnode': kwargs.get('iparepltoposegmentleftnode'),
                'iparepltoposegmentrightnode': kwargs.get('iparepltoposegmentrightnode'),
                'all': True,
                'raw': False,
            }
            data.update(kwargs.get('attrs') or {})

            return data

        def result(self, data):
            return True

    class Reinitialize(Method):
        """Переинициализирует сегмент топологии

        Arguments:
            cn (str): Имя сегмента топологии
            topologysuffixcn (str): Суффикс
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами
        
        Keyword arguments:
            Dict(str, Any): Перечень изменений иных полей

        Returns:
            bool: При успешном выполнении операции возвращает True

        """

        method = 'topologysegment_reinitialize'
        kwargs = {'cn': None, 'topologysuffixcn': None, 'attrs': {}}

        def kwargs_validate(self, kwargs):
            return None not in [kwargs.get('cn'), kwargs.get('topologysuffixcn')]

        def item(self, kwargs):
            return kwargs.get('topologysuffixcn'), kwargs.get('cn')

        def params(self, kwargs):
            data = kwargs.get('attrs') or {}
            return data

    class Update(Method):
        """Обновить сегмент топологии

        Arguments:
            cn (str): Имя сегмента топологии
            topologysuffixcn (str): Суффикс
            attrs (Dict[str, Any]): Словарь с дополнительными параметрами
        
        Keyword arguments:
            Dict(str, Any): Перечень изменений иных полей

        Returns:
            bool: При успешном выполнении операции возвращает True

        """

        method = 'topologysegment_mod'
        kwargs = {'cn': None, 'topologysuffixcn': None, 'attrs': {}}

        def kwargs_validate(self, kwargs):
            return None not in [kwargs.get('cn'), kwargs.get('topologysuffixcn')]

        def item(self, kwargs):
            return kwargs.get('topologysuffixcn'), kwargs.get('cn')

        def params(self, kwargs):
            data = {
                'all': True,
                'raw': False,
                'rights': False,
            }
            data.update(kwargs.get('attrs') or {})
            return data

    class Delete(Method):
        """Удаляет сегмент топологии

        Arguments:
            cn (str): Имя сегмента топологии
            topologysuffixcn (str): Суффикс 

        Returns:
            bool: При успешном выполнении операции возвращает True

        """

        method = 'topologysegment_del'
        kwargs = {'cn': None, 'topologysuffixcn': None}

        def kwargs_validate(self, kwargs):
            return None not in [kwargs.get('cn'), kwargs.get('topologysuffixcn')]

        def item(self, kwargs):
            return kwargs.get('topologysuffixcn'), kwargs.get('cn')

        def params(self, kwargs):
            return {}

        def result(self, data):
            return True
