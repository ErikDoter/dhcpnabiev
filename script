from typing import List

from directory_service.transport.group_based_utils import move_group_to_container, check_consistency
from directory_service.transport.logon import IPAError
from directory_service.transport.models import BaseFind, BaseAdd, BaseTransport, BaseGet, BaseDelete, BaseUpdate
from directory_service.utils import get_ipa_field, get_result_batch_response_list, get_location
from directory_service.transport.group_policy_templates import GroupPolicyTemplateTransport


class GroupPolicyTemplateGroupTransport(BaseTransport):

    template_transport = GroupPolicyTemplateTransport

    @classmethod
    def find(cls, cn=None, template=None, attrs=None, sizelimit=0):
        attrs = attrs or {}
        attrs.update(searchfrom=template)
        return cls.request(cls.Find(attrs=attrs))

    @classmethod
    def add(cls, dn=None, attrs=None):
        cn, container = get_location(dn)
        attrs.pop('cn', None)
        return cls.request(cls.Add(ident=cn, attrs=attrs))

    @classmethod
    def get(cls, dn=None, attrs=None):
        cn, container = get_location(dn)
        attrs = attrs or {}
        attrs.update(searchfrom=container)
        data = cls.request(cls.Get(ident=cn, attrs=attrs))
        return data

    @classmethod
    def delete(cls, dn=None, attrs=None):
        cn, container = get_location(dn)
        attrs = attrs or {}
        attrs.update(searchfrom=container)
        return cls.request(cls.Delete(ident=cn, attrs=attrs))

    @classmethod
    def check_already_exists(cls, cn, target_container):
        same_name_objects = [t.get('cn') for t in cls.find(cn=cn, template=target_container)]
        return True if same_name_objects else False

    @classmethod
    def update(cls, dn=None, attrs=None):
        attrs = attrs or {}

        new_container = attrs.pop('searchfrom', None)
        cn, container = get_location(dn)
        if not new_container or new_container == container:
            attrs.update(searchfrom=container)
            cls.request(cls.Update(ident=cn, attrs=attrs))
            return cls.get(dn, attrs=dict(searchfrom=container))
        if cls.check_already_exists(cn, new_container):
            raise IPAError('DuplicateEntry', f'"{cn}" is already exists in "{new_container}"')
        check_consistency(dn, new_container)
        move_group_to_container(cls, cls.template_transport, dn, new_container, attrs)
        cls.delete(dn)
        return cls.get(f'cn={cn},{new_container}')

    class Find(BaseFind):
        method = 'templatepolicygroup_find'

    class Add(BaseAdd):
        method = 'templatepolicygroup_add'

        def result(self, data):
            return data

    class Get(BaseGet):
        method = 'templatepolicygroup_show'

    class Delete(BaseDelete):
        method = 'templatepolicygroup_del'

        def params(self, kwargs):
            data = kwargs.get('attrs') or {}
            return data

    class Update(BaseUpdate):
        method = 'templatepolicygroup_mod'

        def result(self, data):
            return data

